import { BinaryDataDecoder, BinaryDataEncoder } from '../BinaryDataEncoding.js';
import { decode, encode, typeId } from '../symbols.js';
import { UaError } from '../UaError.js';
import { isUInt32 } from '../util.js';
import { NodeIds } from './NodeIds.js';
import { UInt32 } from './Primitives.js';

export enum StatusCodeSeverity {
  Good = 0b00,
  Uncertain = 0b01,
  Bad = 0b10,
  Reserved = 0b11
}

export interface StatusCodeOptions {
  code?: UInt32 | undefined;
  name?: string | undefined;
  description?: string | undefined;
}

export class StatusCode implements StatusCodeOptions {
  readonly code: UInt32;
  readonly name: string | undefined;
  readonly description: string | undefined;

  private constructor(options?: StatusCodeOptions) {
    this.code = options?.code ?? 0;
    this.name = options?.name;
    this.description = options?.description;

    Object.defineProperty(this, 'code', { writable: false, enumerable: true });
    Object.defineProperty(this, 'name', { writable: false, enumerable: true });
    Object.defineProperty(this, 'description', { writable: false, enumerable: true });
  }

  toString(): string {
    if (this.name) {
      return this.name;
    }
    const severity = StatusCodeSeverity[this.severity];
    if (severity) {
      return `${severity}Unknown`;
    }
    return 'Unknown';
  }

  valueOf(): number {
    return this.code;
  }

  get severity(): StatusCodeSeverity {
    return (this.code & 0xC0000000) >>> 30 as StatusCodeSeverity;
  }
  
  isGood(): boolean {
    return this.severity === StatusCodeSeverity.Good;
  }

  isUncertain(): boolean {
    return this.severity === StatusCodeSeverity.Uncertain;
  }

  isBad(): boolean {
    return this.severity === StatusCodeSeverity.Bad;
  }

  isNotGood(): boolean {
    return this.severity !== StatusCodeSeverity.Good;
  }

  isNotUncertain(): boolean {
    return this.severity !== StatusCodeSeverity.Uncertain;
  }

  isNotBad(): boolean {
    return this.severity !== StatusCodeSeverity.Bad;
  }

  is(other: StatusCode): boolean {
    return this.code === other.code;
  }

  /** Throws if StatusCode isn't Good. */
  ensureGood(): void {
    if (!this.isGood()) {
      throw new UaError({code: this});
    }
  }

  /** Throws if StatusCode is Bad. */
  ensureNotBad(): void {
    if (this.isBad()) {
      throw new UaError({code: this});
    }
  }

  /** Returns a StatusCode with the numeric code */
  static from(code: UInt32): StatusCode {
    if (!isUInt32(code)) {
      throw new UaError({code: StatusCode.BadOutOfRange});
    }
    const s = (StatusCode as unknown as Record<number, unknown>)[code];
    if (s instanceof StatusCode) {
      return s;
    }
    return new StatusCode({code});
  }

  readonly [typeId] = NodeIds.StatusCode as const;
  static readonly [typeId] = NodeIds.StatusCode as const;

  [encode](encoder: BinaryDataEncoder): void {
    encoder.writeUInt32(this.code);
  }

  static [decode](decoder: BinaryDataDecoder): StatusCode {
    const code = decoder.readUInt32();

    return StatusCode.from(code);
  }

  // Autogenerated

  /** The operation succeeded. */
  static Good = new StatusCode({name: "Good", code: 0x00000000, description: "The operation succeeded."});
  /** The operation was uncertain. */
  static Uncertain = new StatusCode({name: "Uncertain", code: 0x40000000, description: "The operation was uncertain."});
  /** The operation failed. */
  static Bad = new StatusCode({name: "Bad", code: 0x80000000, description: "The operation failed."});
  /** An unexpected error occurred. */
  static BadUnexpectedError = new StatusCode({name: "BadUnexpectedError", code: 0x80010000, description: "An unexpected error occurred."});
  /** An internal error occurred as a result of a programming or configuration error. */
  static BadInternalError = new StatusCode({name: "BadInternalError", code: 0x80020000, description: "An internal error occurred as a result of a programming or configuration error."});
  /** Not enough memory to complete the operation. */
  static BadOutOfMemory = new StatusCode({name: "BadOutOfMemory", code: 0x80030000, description: "Not enough memory to complete the operation."});
  /** An operating system resource is not available. */
  static BadResourceUnavailable = new StatusCode({name: "BadResourceUnavailable", code: 0x80040000, description: "An operating system resource is not available."});
  /** A low level communication error occurred. */
  static BadCommunicationError = new StatusCode({name: "BadCommunicationError", code: 0x80050000, description: "A low level communication error occurred."});
  /** Encoding halted because of invalid data in the objects being serialized. */
  static BadEncodingError = new StatusCode({name: "BadEncodingError", code: 0x80060000, description: "Encoding halted because of invalid data in the objects being serialized."});
  /** Decoding halted because of invalid data in the stream. */
  static BadDecodingError = new StatusCode({name: "BadDecodingError", code: 0x80070000, description: "Decoding halted because of invalid data in the stream."});
  /** The message encoding/decoding limits imposed by the stack have been exceeded. */
  static BadEncodingLimitsExceeded = new StatusCode({name: "BadEncodingLimitsExceeded", code: 0x80080000, description: "The message encoding/decoding limits imposed by the stack have been exceeded."});
  /** The request message size exceeds limits set by the server. */
  static BadRequestTooLarge = new StatusCode({name: "BadRequestTooLarge", code: 0x80B80000, description: "The request message size exceeds limits set by the server."});
  /** The response message size exceeds limits set by the client. */
  static BadResponseTooLarge = new StatusCode({name: "BadResponseTooLarge", code: 0x80B90000, description: "The response message size exceeds limits set by the client."});
  /** An unrecognized response was received from the server. */
  static BadUnknownResponse = new StatusCode({name: "BadUnknownResponse", code: 0x80090000, description: "An unrecognized response was received from the server."});
  /** The operation timed out. */
  static BadTimeout = new StatusCode({name: "BadTimeout", code: 0x800A0000, description: "The operation timed out."});
  /** The server does not support the requested service. */
  static BadServiceUnsupported = new StatusCode({name: "BadServiceUnsupported", code: 0x800B0000, description: "The server does not support the requested service."});
  /** The operation was cancelled because the application is shutting down. */
  static BadShutdown = new StatusCode({name: "BadShutdown", code: 0x800C0000, description: "The operation was cancelled because the application is shutting down."});
  /** The operation could not complete because the client is not connected to the server. */
  static BadServerNotConnected = new StatusCode({name: "BadServerNotConnected", code: 0x800D0000, description: "The operation could not complete because the client is not connected to the server."});
  /** The server has stopped and cannot process any requests. */
  static BadServerHalted = new StatusCode({name: "BadServerHalted", code: 0x800E0000, description: "The server has stopped and cannot process any requests."});
  /** There was nothing to do because the client passed a list of operations with no elements. */
  static BadNothingToDo = new StatusCode({name: "BadNothingToDo", code: 0x800F0000, description: "There was nothing to do because the client passed a list of operations with no elements."});
  /** The request could not be processed because it specified too many operations. */
  static BadTooManyOperations = new StatusCode({name: "BadTooManyOperations", code: 0x80100000, description: "The request could not be processed because it specified too many operations."});
  /** The request could not be processed because there are too many monitored items in the subscription. */
  static BadTooManyMonitoredItems = new StatusCode({name: "BadTooManyMonitoredItems", code: 0x80DB0000, description: "The request could not be processed because there are too many monitored items in the subscription."});
  /** The extension object cannot be (de)serialized because the data type id is not recognized. */
  static BadDataTypeIdUnknown = new StatusCode({name: "BadDataTypeIdUnknown", code: 0x80110000, description: "The extension object cannot be (de)serialized because the data type id is not recognized."});
  /** The certificate provided as a parameter is not valid. */
  static BadCertificateInvalid = new StatusCode({name: "BadCertificateInvalid", code: 0x80120000, description: "The certificate provided as a parameter is not valid."});
  /** An error occurred verifying security. */
  static BadSecurityChecksFailed = new StatusCode({name: "BadSecurityChecksFailed", code: 0x80130000, description: "An error occurred verifying security."});
  /** The certificate does not meet the requirements of the security policy. */
  static BadCertificatePolicyCheckFailed = new StatusCode({name: "BadCertificatePolicyCheckFailed", code: 0x81140000, description: "The certificate does not meet the requirements of the security policy."});
  /** The certificate has expired or is not yet valid. */
  static BadCertificateTimeInvalid = new StatusCode({name: "BadCertificateTimeInvalid", code: 0x80140000, description: "The certificate has expired or is not yet valid."});
  /** An issuer certificate has expired or is not yet valid. */
  static BadCertificateIssuerTimeInvalid = new StatusCode({name: "BadCertificateIssuerTimeInvalid", code: 0x80150000, description: "An issuer certificate has expired or is not yet valid."});
  /** The HostName used to connect to a server does not match a HostName in the certificate. */
  static BadCertificateHostNameInvalid = new StatusCode({name: "BadCertificateHostNameInvalid", code: 0x80160000, description: "The HostName used to connect to a server does not match a HostName in the certificate."});
  /** The URI specified in the ApplicationDescription does not match the URI in the certificate. */
  static BadCertificateUriInvalid = new StatusCode({name: "BadCertificateUriInvalid", code: 0x80170000, description: "The URI specified in the ApplicationDescription does not match the URI in the certificate."});
  /** The certificate may not be used for the requested operation. */
  static BadCertificateUseNotAllowed = new StatusCode({name: "BadCertificateUseNotAllowed", code: 0x80180000, description: "The certificate may not be used for the requested operation."});
  /** The issuer certificate may not be used for the requested operation. */
  static BadCertificateIssuerUseNotAllowed = new StatusCode({name: "BadCertificateIssuerUseNotAllowed", code: 0x80190000, description: "The issuer certificate may not be used for the requested operation."});
  /** The certificate is not trusted. */
  static BadCertificateUntrusted = new StatusCode({name: "BadCertificateUntrusted", code: 0x801A0000, description: "The certificate is not trusted."});
  /** It was not possible to determine if the certificate has been revoked. */
  static BadCertificateRevocationUnknown = new StatusCode({name: "BadCertificateRevocationUnknown", code: 0x801B0000, description: "It was not possible to determine if the certificate has been revoked."});
  /** It was not possible to determine if the issuer certificate has been revoked. */
  static BadCertificateIssuerRevocationUnknown = new StatusCode({name: "BadCertificateIssuerRevocationUnknown", code: 0x801C0000, description: "It was not possible to determine if the issuer certificate has been revoked."});
  /** The certificate has been revoked. */
  static BadCertificateRevoked = new StatusCode({name: "BadCertificateRevoked", code: 0x801D0000, description: "The certificate has been revoked."});
  /** The issuer certificate has been revoked. */
  static BadCertificateIssuerRevoked = new StatusCode({name: "BadCertificateIssuerRevoked", code: 0x801E0000, description: "The issuer certificate has been revoked."});
  /** The certificate chain is incomplete. */
  static BadCertificateChainIncomplete = new StatusCode({name: "BadCertificateChainIncomplete", code: 0x810D0000, description: "The certificate chain is incomplete."});
  /** User does not have permission to perform the requested operation. */
  static BadUserAccessDenied = new StatusCode({name: "BadUserAccessDenied", code: 0x801F0000, description: "User does not have permission to perform the requested operation."});
  /** The user identity token is not valid. */
  static BadIdentityTokenInvalid = new StatusCode({name: "BadIdentityTokenInvalid", code: 0x80200000, description: "The user identity token is not valid."});
  /** The user identity token is valid but the server has rejected it. */
  static BadIdentityTokenRejected = new StatusCode({name: "BadIdentityTokenRejected", code: 0x80210000, description: "The user identity token is valid but the server has rejected it."});
  /** The specified secure channel is no longer valid. */
  static BadSecureChannelIdInvalid = new StatusCode({name: "BadSecureChannelIdInvalid", code: 0x80220000, description: "The specified secure channel is no longer valid."});
  /** The timestamp is outside the range allowed by the server. */
  static BadInvalidTimestamp = new StatusCode({name: "BadInvalidTimestamp", code: 0x80230000, description: "The timestamp is outside the range allowed by the server."});
  /** The nonce does appear to be not a random value or it is not the correct length. */
  static BadNonceInvalid = new StatusCode({name: "BadNonceInvalid", code: 0x80240000, description: "The nonce does appear to be not a random value or it is not the correct length."});
  /** The session id is not valid. */
  static BadSessionIdInvalid = new StatusCode({name: "BadSessionIdInvalid", code: 0x80250000, description: "The session id is not valid."});
  /** The session was closed by the client. */
  static BadSessionClosed = new StatusCode({name: "BadSessionClosed", code: 0x80260000, description: "The session was closed by the client."});
  /** The session cannot be used because ActivateSession has not been called. */
  static BadSessionNotActivated = new StatusCode({name: "BadSessionNotActivated", code: 0x80270000, description: "The session cannot be used because ActivateSession has not been called."});
  /** The subscription id is not valid. */
  static BadSubscriptionIdInvalid = new StatusCode({name: "BadSubscriptionIdInvalid", code: 0x80280000, description: "The subscription id is not valid."});
  /** The header for the request is missing or invalid. */
  static BadRequestHeaderInvalid = new StatusCode({name: "BadRequestHeaderInvalid", code: 0x802A0000, description: "The header for the request is missing or invalid."});
  /** The timestamps to return parameter is invalid. */
  static BadTimestampsToReturnInvalid = new StatusCode({name: "BadTimestampsToReturnInvalid", code: 0x802B0000, description: "The timestamps to return parameter is invalid."});
  /** The request was cancelled by the client. */
  static BadRequestCancelledByClient = new StatusCode({name: "BadRequestCancelledByClient", code: 0x802C0000, description: "The request was cancelled by the client."});
  /** Too many arguments were provided. */
  static BadTooManyArguments = new StatusCode({name: "BadTooManyArguments", code: 0x80E50000, description: "Too many arguments were provided."});
  /** The server requires a license to operate in general or to perform a service or operation, but existing license is expired. */
  static BadLicenseExpired = new StatusCode({name: "BadLicenseExpired", code: 0x810E0000, description: "The server requires a license to operate in general or to perform a service or operation, but existing license is expired."});
  /** The server has limits on number of allowed operations / objects, based on installed licenses, and these limits where exceeded. */
  static BadLicenseLimitsExceeded = new StatusCode({name: "BadLicenseLimitsExceeded", code: 0x810F0000, description: "The server has limits on number of allowed operations / objects, based on installed licenses, and these limits where exceeded."});
  /** The server does not have a license which is required to operate in general or to perform a service or operation. */
  static BadLicenseNotAvailable = new StatusCode({name: "BadLicenseNotAvailable", code: 0x81100000, description: "The server does not have a license which is required to operate in general or to perform a service or operation."});
  /** The subscription was transferred to another session. */
  static GoodSubscriptionTransferred = new StatusCode({name: "GoodSubscriptionTransferred", code: 0x002D0000, description: "The subscription was transferred to another session."});
  /** The processing will complete asynchronously. */
  static GoodCompletesAsynchronously = new StatusCode({name: "GoodCompletesAsynchronously", code: 0x002E0000, description: "The processing will complete asynchronously."});
  /** Sampling has slowed down due to resource limitations. */
  static GoodOverload = new StatusCode({name: "GoodOverload", code: 0x002F0000, description: "Sampling has slowed down due to resource limitations."});
  /** The value written was accepted but was clamped. */
  static GoodClamped = new StatusCode({name: "GoodClamped", code: 0x00300000, description: "The value written was accepted but was clamped."});
  /** Communication with the data source is defined, but not established, and there is no last known value available. */
  static BadNoCommunication = new StatusCode({name: "BadNoCommunication", code: 0x80310000, description: "Communication with the data source is defined, but not established, and there is no last known value available."});
  /** Waiting for the server to obtain values from the underlying data source. */
  static BadWaitingForInitialData = new StatusCode({name: "BadWaitingForInitialData", code: 0x80320000, description: "Waiting for the server to obtain values from the underlying data source."});
  /** The syntax of the node id is not valid. */
  static BadNodeIdInvalid = new StatusCode({name: "BadNodeIdInvalid", code: 0x80330000, description: "The syntax of the node id is not valid."});
  /** The node id refers to a node that does not exist in the server address space. */
  static BadNodeIdUnknown = new StatusCode({name: "BadNodeIdUnknown", code: 0x80340000, description: "The node id refers to a node that does not exist in the server address space."});
  /** The attribute is not supported for the specified Node. */
  static BadAttributeIdInvalid = new StatusCode({name: "BadAttributeIdInvalid", code: 0x80350000, description: "The attribute is not supported for the specified Node."});
  /** The syntax of the index range parameter is invalid. */
  static BadIndexRangeInvalid = new StatusCode({name: "BadIndexRangeInvalid", code: 0x80360000, description: "The syntax of the index range parameter is invalid."});
  /** No data exists within the range of indexes specified. */
  static BadIndexRangeNoData = new StatusCode({name: "BadIndexRangeNoData", code: 0x80370000, description: "No data exists within the range of indexes specified."});
  /** The data encoding is invalid. */
  static BadDataEncodingInvalid = new StatusCode({name: "BadDataEncodingInvalid", code: 0x80380000, description: "The data encoding is invalid."});
  /** The server does not support the requested data encoding for the node. */
  static BadDataEncodingUnsupported = new StatusCode({name: "BadDataEncodingUnsupported", code: 0x80390000, description: "The server does not support the requested data encoding for the node."});
  /** The access level does not allow reading or subscribing to the Node. */
  static BadNotReadable = new StatusCode({name: "BadNotReadable", code: 0x803A0000, description: "The access level does not allow reading or subscribing to the Node."});
  /** The access level does not allow writing to the Node. */
  static BadNotWritable = new StatusCode({name: "BadNotWritable", code: 0x803B0000, description: "The access level does not allow writing to the Node."});
  /** The value was out of range. */
  static BadOutOfRange = new StatusCode({name: "BadOutOfRange", code: 0x803C0000, description: "The value was out of range."});
  /** The requested operation is not supported. */
  static BadNotSupported = new StatusCode({name: "BadNotSupported", code: 0x803D0000, description: "The requested operation is not supported."});
  /** A requested item was not found or a search operation ended without success. */
  static BadNotFound = new StatusCode({name: "BadNotFound", code: 0x803E0000, description: "A requested item was not found or a search operation ended without success."});
  /** The object cannot be used because it has been deleted. */
  static BadObjectDeleted = new StatusCode({name: "BadObjectDeleted", code: 0x803F0000, description: "The object cannot be used because it has been deleted."});
  /** Requested operation is not implemented. */
  static BadNotImplemented = new StatusCode({name: "BadNotImplemented", code: 0x80400000, description: "Requested operation is not implemented."});
  /** The monitoring mode is invalid. */
  static BadMonitoringModeInvalid = new StatusCode({name: "BadMonitoringModeInvalid", code: 0x80410000, description: "The monitoring mode is invalid."});
  /** The monitoring item id does not refer to a valid monitored item. */
  static BadMonitoredItemIdInvalid = new StatusCode({name: "BadMonitoredItemIdInvalid", code: 0x80420000, description: "The monitoring item id does not refer to a valid monitored item."});
  /** The monitored item filter parameter is not valid. */
  static BadMonitoredItemFilterInvalid = new StatusCode({name: "BadMonitoredItemFilterInvalid", code: 0x80430000, description: "The monitored item filter parameter is not valid."});
  /** The server does not support the requested monitored item filter. */
  static BadMonitoredItemFilterUnsupported = new StatusCode({name: "BadMonitoredItemFilterUnsupported", code: 0x80440000, description: "The server does not support the requested monitored item filter."});
  /** A monitoring filter cannot be used in combination with the attribute specified. */
  static BadFilterNotAllowed = new StatusCode({name: "BadFilterNotAllowed", code: 0x80450000, description: "A monitoring filter cannot be used in combination with the attribute specified."});
  /** A mandatory structured parameter was missing or null. */
  static BadStructureMissing = new StatusCode({name: "BadStructureMissing", code: 0x80460000, description: "A mandatory structured parameter was missing or null."});
  /** The event filter is not valid. */
  static BadEventFilterInvalid = new StatusCode({name: "BadEventFilterInvalid", code: 0x80470000, description: "The event filter is not valid."});
  /** The content filter is not valid. */
  static BadContentFilterInvalid = new StatusCode({name: "BadContentFilterInvalid", code: 0x80480000, description: "The content filter is not valid."});
  /** An unrecognized operator was provided in a filter. */
  static BadFilterOperatorInvalid = new StatusCode({name: "BadFilterOperatorInvalid", code: 0x80C10000, description: "An unrecognized operator was provided in a filter."});
  /** A valid operator was provided, but the server does not provide support for this filter operator. */
  static BadFilterOperatorUnsupported = new StatusCode({name: "BadFilterOperatorUnsupported", code: 0x80C20000, description: "A valid operator was provided, but the server does not provide support for this filter operator."});
  /** The number of operands provided for the filter operator was less then expected for the operand provided. */
  static BadFilterOperandCountMismatch = new StatusCode({name: "BadFilterOperandCountMismatch", code: 0x80C30000, description: "The number of operands provided for the filter operator was less then expected for the operand provided."});
  /** The operand used in a content filter is not valid. */
  static BadFilterOperandInvalid = new StatusCode({name: "BadFilterOperandInvalid", code: 0x80490000, description: "The operand used in a content filter is not valid."});
  /** The referenced element is not a valid element in the content filter. */
  static BadFilterElementInvalid = new StatusCode({name: "BadFilterElementInvalid", code: 0x80C40000, description: "The referenced element is not a valid element in the content filter."});
  /** The referenced literal is not a valid value. */
  static BadFilterLiteralInvalid = new StatusCode({name: "BadFilterLiteralInvalid", code: 0x80C50000, description: "The referenced literal is not a valid value."});
  /** The continuation point provide is longer valid. */
  static BadContinuationPointInvalid = new StatusCode({name: "BadContinuationPointInvalid", code: 0x804A0000, description: "The continuation point provide is longer valid."});
  /** The operation could not be processed because all continuation points have been allocated. */
  static BadNoContinuationPoints = new StatusCode({name: "BadNoContinuationPoints", code: 0x804B0000, description: "The operation could not be processed because all continuation points have been allocated."});
  /** The reference type id does not refer to a valid reference type node. */
  static BadReferenceTypeIdInvalid = new StatusCode({name: "BadReferenceTypeIdInvalid", code: 0x804C0000, description: "The reference type id does not refer to a valid reference type node."});
  /** The browse direction is not valid. */
  static BadBrowseDirectionInvalid = new StatusCode({name: "BadBrowseDirectionInvalid", code: 0x804D0000, description: "The browse direction is not valid."});
  /** The node is not part of the view. */
  static BadNodeNotInView = new StatusCode({name: "BadNodeNotInView", code: 0x804E0000, description: "The node is not part of the view."});
  /** The number was not accepted because of a numeric overflow. */
  static BadNumericOverflow = new StatusCode({name: "BadNumericOverflow", code: 0x81120000, description: "The number was not accepted because of a numeric overflow."});
  /** The ServerUri is not a valid URI. */
  static BadServerUriInvalid = new StatusCode({name: "BadServerUriInvalid", code: 0x804F0000, description: "The ServerUri is not a valid URI."});
  /** No ServerName was specified. */
  static BadServerNameMissing = new StatusCode({name: "BadServerNameMissing", code: 0x80500000, description: "No ServerName was specified."});
  /** No DiscoveryUrl was specified. */
  static BadDiscoveryUrlMissing = new StatusCode({name: "BadDiscoveryUrlMissing", code: 0x80510000, description: "No DiscoveryUrl was specified."});
  /** The semaphore file specified by the client is not valid. */
  static BadSempahoreFileMissing = new StatusCode({name: "BadSempahoreFileMissing", code: 0x80520000, description: "The semaphore file specified by the client is not valid."});
  /** The security token request type is not valid. */
  static BadRequestTypeInvalid = new StatusCode({name: "BadRequestTypeInvalid", code: 0x80530000, description: "The security token request type is not valid."});
  /** The security mode does not meet the requirements set by the server. */
  static BadSecurityModeRejected = new StatusCode({name: "BadSecurityModeRejected", code: 0x80540000, description: "The security mode does not meet the requirements set by the server."});
  /** The security policy does not meet the requirements set by the server. */
  static BadSecurityPolicyRejected = new StatusCode({name: "BadSecurityPolicyRejected", code: 0x80550000, description: "The security policy does not meet the requirements set by the server."});
  /** The server has reached its maximum number of sessions. */
  static BadTooManySessions = new StatusCode({name: "BadTooManySessions", code: 0x80560000, description: "The server has reached its maximum number of sessions."});
  /** The user token signature is missing or invalid. */
  static BadUserSignatureInvalid = new StatusCode({name: "BadUserSignatureInvalid", code: 0x80570000, description: "The user token signature is missing or invalid."});
  /** The signature generated with the client certificate is missing or invalid. */
  static BadApplicationSignatureInvalid = new StatusCode({name: "BadApplicationSignatureInvalid", code: 0x80580000, description: "The signature generated with the client certificate is missing or invalid."});
  /** The client did not provide at least one software certificate that is valid and meets the profile requirements for the server. */
  static BadNoValidCertificates = new StatusCode({name: "BadNoValidCertificates", code: 0x80590000, description: "The client did not provide at least one software certificate that is valid and meets the profile requirements for the server."});
  /** The server does not support changing the user identity assigned to the session. */
  static BadIdentityChangeNotSupported = new StatusCode({name: "BadIdentityChangeNotSupported", code: 0x80C60000, description: "The server does not support changing the user identity assigned to the session."});
  /** The request was cancelled by the client with the Cancel service. */
  static BadRequestCancelledByRequest = new StatusCode({name: "BadRequestCancelledByRequest", code: 0x805A0000, description: "The request was cancelled by the client with the Cancel service."});
  /** The parent node id does not to refer to a valid node. */
  static BadParentNodeIdInvalid = new StatusCode({name: "BadParentNodeIdInvalid", code: 0x805B0000, description: "The parent node id does not to refer to a valid node."});
  /** The reference could not be created because it violates constraints imposed by the data model. */
  static BadReferenceNotAllowed = new StatusCode({name: "BadReferenceNotAllowed", code: 0x805C0000, description: "The reference could not be created because it violates constraints imposed by the data model."});
  /** The requested node id was reject because it was either invalid or server does not allow node ids to be specified by the client. */
  static BadNodeIdRejected = new StatusCode({name: "BadNodeIdRejected", code: 0x805D0000, description: "The requested node id was reject because it was either invalid or server does not allow node ids to be specified by the client."});
  /** The requested node id is already used by another node. */
  static BadNodeIdExists = new StatusCode({name: "BadNodeIdExists", code: 0x805E0000, description: "The requested node id is already used by another node."});
  /** The node class is not valid. */
  static BadNodeClassInvalid = new StatusCode({name: "BadNodeClassInvalid", code: 0x805F0000, description: "The node class is not valid."});
  /** The browse name is invalid. */
  static BadBrowseNameInvalid = new StatusCode({name: "BadBrowseNameInvalid", code: 0x80600000, description: "The browse name is invalid."});
  /** The browse name is not unique among nodes that share the same relationship with the parent. */
  static BadBrowseNameDuplicated = new StatusCode({name: "BadBrowseNameDuplicated", code: 0x80610000, description: "The browse name is not unique among nodes that share the same relationship with the parent."});
  /** The node attributes are not valid for the node class. */
  static BadNodeAttributesInvalid = new StatusCode({name: "BadNodeAttributesInvalid", code: 0x80620000, description: "The node attributes are not valid for the node class."});
  /** The type definition node id does not reference an appropriate type node. */
  static BadTypeDefinitionInvalid = new StatusCode({name: "BadTypeDefinitionInvalid", code: 0x80630000, description: "The type definition node id does not reference an appropriate type node."});
  /** The source node id does not reference a valid node. */
  static BadSourceNodeIdInvalid = new StatusCode({name: "BadSourceNodeIdInvalid", code: 0x80640000, description: "The source node id does not reference a valid node."});
  /** The target node id does not reference a valid node. */
  static BadTargetNodeIdInvalid = new StatusCode({name: "BadTargetNodeIdInvalid", code: 0x80650000, description: "The target node id does not reference a valid node."});
  /** The reference type between the nodes is already defined. */
  static BadDuplicateReferenceNotAllowed = new StatusCode({name: "BadDuplicateReferenceNotAllowed", code: 0x80660000, description: "The reference type between the nodes is already defined."});
  /** The server does not allow this type of self reference on this node. */
  static BadInvalidSelfReference = new StatusCode({name: "BadInvalidSelfReference", code: 0x80670000, description: "The server does not allow this type of self reference on this node."});
  /** The reference type is not valid for a reference to a remote server. */
  static BadReferenceLocalOnly = new StatusCode({name: "BadReferenceLocalOnly", code: 0x80680000, description: "The reference type is not valid for a reference to a remote server."});
  /** The server will not allow the node to be deleted. */
  static BadNoDeleteRights = new StatusCode({name: "BadNoDeleteRights", code: 0x80690000, description: "The server will not allow the node to be deleted."});
  /** The server was not able to delete all target references. */
  static UncertainReferenceNotDeleted = new StatusCode({name: "UncertainReferenceNotDeleted", code: 0x40BC0000, description: "The server was not able to delete all target references."});
  /** The server index is not valid. */
  static BadServerIndexInvalid = new StatusCode({name: "BadServerIndexInvalid", code: 0x806A0000, description: "The server index is not valid."});
  /** The view id does not refer to a valid view node. */
  static BadViewIdUnknown = new StatusCode({name: "BadViewIdUnknown", code: 0x806B0000, description: "The view id does not refer to a valid view node."});
  /** The view timestamp is not available or not supported. */
  static BadViewTimestampInvalid = new StatusCode({name: "BadViewTimestampInvalid", code: 0x80C90000, description: "The view timestamp is not available or not supported."});
  /** The view parameters are not consistent with each other. */
  static BadViewParameterMismatch = new StatusCode({name: "BadViewParameterMismatch", code: 0x80CA0000, description: "The view parameters are not consistent with each other."});
  /** The view version is not available or not supported. */
  static BadViewVersionInvalid = new StatusCode({name: "BadViewVersionInvalid", code: 0x80CB0000, description: "The view version is not available or not supported."});
  /** The list of references may not be complete because the underlying system is not available. */
  static UncertainNotAllNodesAvailable = new StatusCode({name: "UncertainNotAllNodesAvailable", code: 0x40C00000, description: "The list of references may not be complete because the underlying system is not available."});
  /** The server should have followed a reference to a node in a remote server but did not. The result set may be incomplete. */
  static GoodResultsMayBeIncomplete = new StatusCode({name: "GoodResultsMayBeIncomplete", code: 0x00BA0000, description: "The server should have followed a reference to a node in a remote server but did not. The result set may be incomplete."});
  /** The provided Nodeid was not a type definition nodeid. */
  static BadNotTypeDefinition = new StatusCode({name: "BadNotTypeDefinition", code: 0x80C80000, description: "The provided Nodeid was not a type definition nodeid."});
  /** One of the references to follow in the relative path references to a node in the address space in another server. */
  static UncertainReferenceOutOfServer = new StatusCode({name: "UncertainReferenceOutOfServer", code: 0x406C0000, description: "One of the references to follow in the relative path references to a node in the address space in another server."});
  /** The requested operation has too many matches to return. */
  static BadTooManyMatches = new StatusCode({name: "BadTooManyMatches", code: 0x806D0000, description: "The requested operation has too many matches to return."});
  /** The requested operation requires too many resources in the server. */
  static BadQueryTooComplex = new StatusCode({name: "BadQueryTooComplex", code: 0x806E0000, description: "The requested operation requires too many resources in the server."});
  /** The requested operation has no match to return. */
  static BadNoMatch = new StatusCode({name: "BadNoMatch", code: 0x806F0000, description: "The requested operation has no match to return."});
  /** The max age parameter is invalid. */
  static BadMaxAgeInvalid = new StatusCode({name: "BadMaxAgeInvalid", code: 0x80700000, description: "The max age parameter is invalid."});
  /** The operation is not permitted over the current secure channel. */
  static BadSecurityModeInsufficient = new StatusCode({name: "BadSecurityModeInsufficient", code: 0x80E60000, description: "The operation is not permitted over the current secure channel."});
  /** The history details parameter is not valid. */
  static BadHistoryOperationInvalid = new StatusCode({name: "BadHistoryOperationInvalid", code: 0x80710000, description: "The history details parameter is not valid."});
  /** The server does not support the requested operation. */
  static BadHistoryOperationUnsupported = new StatusCode({name: "BadHistoryOperationUnsupported", code: 0x80720000, description: "The server does not support the requested operation."});
  /** The defined timestamp to return was invalid. */
  static BadInvalidTimestampArgument = new StatusCode({name: "BadInvalidTimestampArgument", code: 0x80BD0000, description: "The defined timestamp to return was invalid."});
  /** The server does not support writing the combination of value, status and timestamps provided. */
  static BadWriteNotSupported = new StatusCode({name: "BadWriteNotSupported", code: 0x80730000, description: "The server does not support writing the combination of value, status and timestamps provided."});
  /** The value supplied for the attribute is not of the same type as the attribute's value. */
  static BadTypeMismatch = new StatusCode({name: "BadTypeMismatch", code: 0x80740000, description: "The value supplied for the attribute is not of the same type as the attribute's value."});
  /** The method id does not refer to a method for the specified object. */
  static BadMethodInvalid = new StatusCode({name: "BadMethodInvalid", code: 0x80750000, description: "The method id does not refer to a method for the specified object."});
  /** The client did not specify all of the input arguments for the method. */
  static BadArgumentsMissing = new StatusCode({name: "BadArgumentsMissing", code: 0x80760000, description: "The client did not specify all of the input arguments for the method."});
  /** The executable attribute does not allow the execution of the method. */
  static BadNotExecutable = new StatusCode({name: "BadNotExecutable", code: 0x81110000, description: "The executable attribute does not allow the execution of the method."});
  /** The server has reached its maximum number of subscriptions. */
  static BadTooManySubscriptions = new StatusCode({name: "BadTooManySubscriptions", code: 0x80770000, description: "The server has reached its maximum number of subscriptions."});
  /** The server has reached the maximum number of queued publish requests. */
  static BadTooManyPublishRequests = new StatusCode({name: "BadTooManyPublishRequests", code: 0x80780000, description: "The server has reached the maximum number of queued publish requests."});
  /** There is no subscription available for this session. */
  static BadNoSubscription = new StatusCode({name: "BadNoSubscription", code: 0x80790000, description: "There is no subscription available for this session."});
  /** The sequence number is unknown to the server. */
  static BadSequenceNumberUnknown = new StatusCode({name: "BadSequenceNumberUnknown", code: 0x807A0000, description: "The sequence number is unknown to the server."});
  /** The Server does not support retransmission queue and acknowledgement of sequence numbers is not available. */
  static GoodRetransmissionQueueNotSupported = new StatusCode({name: "GoodRetransmissionQueueNotSupported", code: 0x00DF0000, description: "The Server does not support retransmission queue and acknowledgement of sequence numbers is not available."});
  /** The requested notification message is no longer available. */
  static BadMessageNotAvailable = new StatusCode({name: "BadMessageNotAvailable", code: 0x807B0000, description: "The requested notification message is no longer available."});
  /** The client of the current session does not support one or more Profiles that are necessary for the subscription. */
  static BadInsufficientClientProfile = new StatusCode({name: "BadInsufficientClientProfile", code: 0x807C0000, description: "The client of the current session does not support one or more Profiles that are necessary for the subscription."});
  /** The sub-state machine is not currently active. */
  static BadStateNotActive = new StatusCode({name: "BadStateNotActive", code: 0x80BF0000, description: "The sub-state machine is not currently active."});
  /** An equivalent rule already exists. */
  static BadAlreadyExists = new StatusCode({name: "BadAlreadyExists", code: 0x81150000, description: "An equivalent rule already exists."});
  /** The server cannot process the request because it is too busy. */
  static BadTcpServerTooBusy = new StatusCode({name: "BadTcpServerTooBusy", code: 0x807D0000, description: "The server cannot process the request because it is too busy."});
  /** The type of the message specified in the header invalid. */
  static BadTcpMessageTypeInvalid = new StatusCode({name: "BadTcpMessageTypeInvalid", code: 0x807E0000, description: "The type of the message specified in the header invalid."});
  /** The SecureChannelId and/or TokenId are not currently in use. */
  static BadTcpSecureChannelUnknown = new StatusCode({name: "BadTcpSecureChannelUnknown", code: 0x807F0000, description: "The SecureChannelId and/or TokenId are not currently in use."});
  /** The size of the message chunk specified in the header is too large. */
  static BadTcpMessageTooLarge = new StatusCode({name: "BadTcpMessageTooLarge", code: 0x80800000, description: "The size of the message chunk specified in the header is too large."});
  /** There are not enough resources to process the request. */
  static BadTcpNotEnoughResources = new StatusCode({name: "BadTcpNotEnoughResources", code: 0x80810000, description: "There are not enough resources to process the request."});
  /** An internal error occurred. */
  static BadTcpInternalError = new StatusCode({name: "BadTcpInternalError", code: 0x80820000, description: "An internal error occurred."});
  /** The server does not recognize the QueryString specified. */
  static BadTcpEndpointUrlInvalid = new StatusCode({name: "BadTcpEndpointUrlInvalid", code: 0x80830000, description: "The server does not recognize the QueryString specified."});
  /** The request could not be sent because of a network interruption. */
  static BadRequestInterrupted = new StatusCode({name: "BadRequestInterrupted", code: 0x80840000, description: "The request could not be sent because of a network interruption."});
  /** Timeout occurred while processing the request. */
  static BadRequestTimeout = new StatusCode({name: "BadRequestTimeout", code: 0x80850000, description: "Timeout occurred while processing the request."});
  /** The secure channel has been closed. */
  static BadSecureChannelClosed = new StatusCode({name: "BadSecureChannelClosed", code: 0x80860000, description: "The secure channel has been closed."});
  /** The token has expired or is not recognized. */
  static BadSecureChannelTokenUnknown = new StatusCode({name: "BadSecureChannelTokenUnknown", code: 0x80870000, description: "The token has expired or is not recognized."});
  /** The sequence number is not valid. */
  static BadSequenceNumberInvalid = new StatusCode({name: "BadSequenceNumberInvalid", code: 0x80880000, description: "The sequence number is not valid."});
  /** The applications do not have compatible protocol versions. */
  static BadProtocolVersionUnsupported = new StatusCode({name: "BadProtocolVersionUnsupported", code: 0x80BE0000, description: "The applications do not have compatible protocol versions."});
  /** There is a problem with the configuration that affects the usefulness of the value. */
  static BadConfigurationError = new StatusCode({name: "BadConfigurationError", code: 0x80890000, description: "There is a problem with the configuration that affects the usefulness of the value."});
  /** The variable should receive its value from another variable, but has never been configured to do so. */
  static BadNotConnected = new StatusCode({name: "BadNotConnected", code: 0x808A0000, description: "The variable should receive its value from another variable, but has never been configured to do so."});
  /** There has been a failure in the device/data source that generates the value that has affected the value. */
  static BadDeviceFailure = new StatusCode({name: "BadDeviceFailure", code: 0x808B0000, description: "There has been a failure in the device/data source that generates the value that has affected the value."});
  /** There has been a failure in the sensor from which the value is derived by the device/data source. */
  static BadSensorFailure = new StatusCode({name: "BadSensorFailure", code: 0x808C0000, description: "There has been a failure in the sensor from which the value is derived by the device/data source."});
  /** The source of the data is not operational. */
  static BadOutOfService = new StatusCode({name: "BadOutOfService", code: 0x808D0000, description: "The source of the data is not operational."});
  /** The deadband filter is not valid. */
  static BadDeadbandFilterInvalid = new StatusCode({name: "BadDeadbandFilterInvalid", code: 0x808E0000, description: "The deadband filter is not valid."});
  /** Communication to the data source has failed. The variable value is the last value that had a good quality. */
  static UncertainNoCommunicationLastUsableValue = new StatusCode({name: "UncertainNoCommunicationLastUsableValue", code: 0x408F0000, description: "Communication to the data source has failed. The variable value is the last value that had a good quality."});
  /** Whatever was updating this value has stopped doing so. */
  static UncertainLastUsableValue = new StatusCode({name: "UncertainLastUsableValue", code: 0x40900000, description: "Whatever was updating this value has stopped doing so."});
  /** The value is an operational value that was manually overwritten. */
  static UncertainSubstituteValue = new StatusCode({name: "UncertainSubstituteValue", code: 0x40910000, description: "The value is an operational value that was manually overwritten."});
  /** The value is an initial value for a variable that normally receives its value from another variable. */
  static UncertainInitialValue = new StatusCode({name: "UncertainInitialValue", code: 0x40920000, description: "The value is an initial value for a variable that normally receives its value from another variable."});
  /** The value is at one of the sensor limits. */
  static UncertainSensorNotAccurate = new StatusCode({name: "UncertainSensorNotAccurate", code: 0x40930000, description: "The value is at one of the sensor limits."});
  /** The value is outside of the range of values defined for this parameter. */
  static UncertainEngineeringUnitsExceeded = new StatusCode({name: "UncertainEngineeringUnitsExceeded", code: 0x40940000, description: "The value is outside of the range of values defined for this parameter."});
  /** The value is derived from multiple sources and has less than the required number of Good sources. */
  static UncertainSubNormal = new StatusCode({name: "UncertainSubNormal", code: 0x40950000, description: "The value is derived from multiple sources and has less than the required number of Good sources."});
  /** The value has been overridden. */
  static GoodLocalOverride = new StatusCode({name: "GoodLocalOverride", code: 0x00960000, description: "The value has been overridden."});
  /** This Condition refresh failed, a Condition refresh operation is already in progress. */
  static BadRefreshInProgress = new StatusCode({name: "BadRefreshInProgress", code: 0x80970000, description: "This Condition refresh failed, a Condition refresh operation is already in progress."});
  /** This condition has already been disabled. */
  static BadConditionAlreadyDisabled = new StatusCode({name: "BadConditionAlreadyDisabled", code: 0x80980000, description: "This condition has already been disabled."});
  /** This condition has already been enabled. */
  static BadConditionAlreadyEnabled = new StatusCode({name: "BadConditionAlreadyEnabled", code: 0x80CC0000, description: "This condition has already been enabled."});
  /** Property not available, this condition is disabled. */
  static BadConditionDisabled = new StatusCode({name: "BadConditionDisabled", code: 0x80990000, description: "Property not available, this condition is disabled."});
  /** The specified event id is not recognized. */
  static BadEventIdUnknown = new StatusCode({name: "BadEventIdUnknown", code: 0x809A0000, description: "The specified event id is not recognized."});
  /** The event cannot be acknowledged. */
  static BadEventNotAcknowledgeable = new StatusCode({name: "BadEventNotAcknowledgeable", code: 0x80BB0000, description: "The event cannot be acknowledged."});
  /** The dialog condition is not active. */
  static BadDialogNotActive = new StatusCode({name: "BadDialogNotActive", code: 0x80CD0000, description: "The dialog condition is not active."});
  /** The response is not valid for the dialog. */
  static BadDialogResponseInvalid = new StatusCode({name: "BadDialogResponseInvalid", code: 0x80CE0000, description: "The response is not valid for the dialog."});
  /** The condition branch has already been acknowledged. */
  static BadConditionBranchAlreadyAcked = new StatusCode({name: "BadConditionBranchAlreadyAcked", code: 0x80CF0000, description: "The condition branch has already been acknowledged."});
  /** The condition branch has already been confirmed. */
  static BadConditionBranchAlreadyConfirmed = new StatusCode({name: "BadConditionBranchAlreadyConfirmed", code: 0x80D00000, description: "The condition branch has already been confirmed."});
  /** The condition has already been shelved. */
  static BadConditionAlreadyShelved = new StatusCode({name: "BadConditionAlreadyShelved", code: 0x80D10000, description: "The condition has already been shelved."});
  /** The condition is not currently shelved. */
  static BadConditionNotShelved = new StatusCode({name: "BadConditionNotShelved", code: 0x80D20000, description: "The condition is not currently shelved."});
  /** The shelving time not within an acceptable range. */
  static BadShelvingTimeOutOfRange = new StatusCode({name: "BadShelvingTimeOutOfRange", code: 0x80D30000, description: "The shelving time not within an acceptable range."});
  /** No data exists for the requested time range or event filter. */
  static BadNoData = new StatusCode({name: "BadNoData", code: 0x809B0000, description: "No data exists for the requested time range or event filter."});
  /** No data found to provide upper or lower bound value. */
  static BadBoundNotFound = new StatusCode({name: "BadBoundNotFound", code: 0x80D70000, description: "No data found to provide upper or lower bound value."});
  /** The server cannot retrieve a bound for the variable. */
  static BadBoundNotSupported = new StatusCode({name: "BadBoundNotSupported", code: 0x80D80000, description: "The server cannot retrieve a bound for the variable."});
  /** Data is missing due to collection started/stopped/lost. */
  static BadDataLost = new StatusCode({name: "BadDataLost", code: 0x809D0000, description: "Data is missing due to collection started/stopped/lost."});
  /** Expected data is unavailable for the requested time range due to an un-mounted volume, an off-line archive or tape, or similar reason for temporary unavailability. */
  static BadDataUnavailable = new StatusCode({name: "BadDataUnavailable", code: 0x809E0000, description: "Expected data is unavailable for the requested time range due to an un-mounted volume, an off-line archive or tape, or similar reason for temporary unavailability."});
  /** The data or event was not successfully inserted because a matching entry exists. */
  static BadEntryExists = new StatusCode({name: "BadEntryExists", code: 0x809F0000, description: "The data or event was not successfully inserted because a matching entry exists."});
  /** The data or event was not successfully updated because no matching entry exists. */
  static BadNoEntryExists = new StatusCode({name: "BadNoEntryExists", code: 0x80A00000, description: "The data or event was not successfully updated because no matching entry exists."});
  /** The client requested history using a timestamp format the server does not support (i.e requested ServerTimestamp when server only supports SourceTimestamp). */
  static BadTimestampNotSupported = new StatusCode({name: "BadTimestampNotSupported", code: 0x80A10000, description: "The client requested history using a timestamp format the server does not support (i.e requested ServerTimestamp when server only supports SourceTimestamp)."});
  /** The data or event was successfully inserted into the historical database. */
  static GoodEntryInserted = new StatusCode({name: "GoodEntryInserted", code: 0x00A20000, description: "The data or event was successfully inserted into the historical database."});
  /** The data or event field was successfully replaced in the historical database. */
  static GoodEntryReplaced = new StatusCode({name: "GoodEntryReplaced", code: 0x00A30000, description: "The data or event field was successfully replaced in the historical database."});
  /** The value is derived from multiple values and has less than the required number of Good values. */
  static UncertainDataSubNormal = new StatusCode({name: "UncertainDataSubNormal", code: 0x40A40000, description: "The value is derived from multiple values and has less than the required number of Good values."});
  /** No data exists for the requested time range or event filter. */
  static GoodNoData = new StatusCode({name: "GoodNoData", code: 0x00A50000, description: "No data exists for the requested time range or event filter."});
  /** The data or event field was successfully replaced in the historical database. */
  static GoodMoreData = new StatusCode({name: "GoodMoreData", code: 0x00A60000, description: "The data or event field was successfully replaced in the historical database."});
  /** The requested number of Aggregates does not match the requested number of NodeIds. */
  static BadAggregateListMismatch = new StatusCode({name: "BadAggregateListMismatch", code: 0x80D40000, description: "The requested number of Aggregates does not match the requested number of NodeIds."});
  /** The requested Aggregate is not support by the server. */
  static BadAggregateNotSupported = new StatusCode({name: "BadAggregateNotSupported", code: 0x80D50000, description: "The requested Aggregate is not support by the server."});
  /** The aggregate value could not be derived due to invalid data inputs. */
  static BadAggregateInvalidInputs = new StatusCode({name: "BadAggregateInvalidInputs", code: 0x80D60000, description: "The aggregate value could not be derived due to invalid data inputs."});
  /** The aggregate configuration is not valid for specified node. */
  static BadAggregateConfigurationRejected = new StatusCode({name: "BadAggregateConfigurationRejected", code: 0x80DA0000, description: "The aggregate configuration is not valid for specified node."});
  /** The request specifies fields which are not valid for the EventType or cannot be saved by the historian. */
  static GoodDataIgnored = new StatusCode({name: "GoodDataIgnored", code: 0x00D90000, description: "The request specifies fields which are not valid for the EventType or cannot be saved by the historian."});
  /** The request was rejected by the server because it did not meet the criteria set by the server. */
  static BadRequestNotAllowed = new StatusCode({name: "BadRequestNotAllowed", code: 0x80E40000, description: "The request was rejected by the server because it did not meet the criteria set by the server."});
  /** The request has not been processed by the server yet. */
  static BadRequestNotComplete = new StatusCode({name: "BadRequestNotComplete", code: 0x81130000, description: "The request has not been processed by the server yet."});
  /** The device identity needs a ticket before it can be accepted. */
  static BadTicketRequired = new StatusCode({name: "BadTicketRequired", code: 0x811F0000, description: "The device identity needs a ticket before it can be accepted."});
  /** The device identity needs a ticket before it can be accepted. */
  static BadTicketInvalid = new StatusCode({name: "BadTicketInvalid", code: 0x81200000, description: "The device identity needs a ticket before it can be accepted."});
  /** The value does not come from the real source and has been edited by the server. */
  static GoodEdited = new StatusCode({name: "GoodEdited", code: 0x00DC0000, description: "The value does not come from the real source and has been edited by the server."});
  /** There was an error in execution of these post-actions. */
  static GoodPostActionFailed = new StatusCode({name: "GoodPostActionFailed", code: 0x00DD0000, description: "There was an error in execution of these post-actions."});
  /** The related EngineeringUnit has been changed but the Variable Value is still provided based on the previous unit. */
  static UncertainDominantValueChanged = new StatusCode({name: "UncertainDominantValueChanged", code: 0x40DE0000, description: "The related EngineeringUnit has been changed but the Variable Value is still provided based on the previous unit."});
  /** A dependent value has been changed but the change has not been applied to the device. */
  static GoodDependentValueChanged = new StatusCode({name: "GoodDependentValueChanged", code: 0x00E00000, description: "A dependent value has been changed but the change has not been applied to the device."});
  /** The related EngineeringUnit has been changed but this change has not been applied to the device. The Variable Value is still dependent on the previous unit but its status is currently Bad. */
  static BadDominantValueChanged = new StatusCode({name: "BadDominantValueChanged", code: 0x80E10000, description: "The related EngineeringUnit has been changed but this change has not been applied to the device. The Variable Value is still dependent on the previous unit but its status is currently Bad."});
  /** A dependent value has been changed but the change has not been applied to the device. The quality of the dominant variable is uncertain. */
  static UncertainDependentValueChanged = new StatusCode({name: "UncertainDependentValueChanged", code: 0x40E20000, description: "A dependent value has been changed but the change has not been applied to the device. The quality of the dominant variable is uncertain."});
  /** A dependent value has been changed but the change has not been applied to the device. The quality of the dominant variable is Bad. */
  static BadDependentValueChanged = new StatusCode({name: "BadDependentValueChanged", code: 0x80E30000, description: "A dependent value has been changed but the change has not been applied to the device. The quality of the dominant variable is Bad."});
  /** It is delivered with a dominant Variable value when a dependent Variable has changed but the change has not been applied. */
  static GoodEdited_DependentValueChanged = new StatusCode({name: "GoodEdited_DependentValueChanged", code: 0x01160000, description: "It is delivered with a dominant Variable value when a dependent Variable has changed but the change has not been applied."});
  /** It is delivered with a dependent Variable value when a dominant Variable has changed but the change has not been applied. */
  static GoodEdited_DominantValueChanged = new StatusCode({name: "GoodEdited_DominantValueChanged", code: 0x01170000, description: "It is delivered with a dependent Variable value when a dominant Variable has changed but the change has not been applied."});
  /** It is delivered with a dependent Variable value when a dominant or dependent Variable has changed but change has not been applied. */
  static GoodEdited_DominantValueChanged_DependentValueChanged = new StatusCode({name: "GoodEdited_DominantValueChanged_DependentValueChanged", code: 0x01180000, description: "It is delivered with a dependent Variable value when a dominant or dependent Variable has changed but change has not been applied."});
  /** It is delivered with a Variable value when Variable has changed but the value is not legal. */
  static BadEdited_OutOfRange = new StatusCode({name: "BadEdited_OutOfRange", code: 0x81190000, description: "It is delivered with a Variable value when Variable has changed but the value is not legal."});
  /** It is delivered with a Variable value when a source Variable has changed but the value is not legal. */
  static BadInitialValue_OutOfRange = new StatusCode({name: "BadInitialValue_OutOfRange", code: 0x811A0000, description: "It is delivered with a Variable value when a source Variable has changed but the value is not legal."});
  /** It is delivered with a dependent Variable value when a dominant Variable has changed and the value is not legal. */
  static BadOutOfRange_DominantValueChanged = new StatusCode({name: "BadOutOfRange_DominantValueChanged", code: 0x811B0000, description: "It is delivered with a dependent Variable value when a dominant Variable has changed and the value is not legal."});
  /** It is delivered with a dependent Variable value when a dominant Variable has changed, the value is not legal and the change has not been applied. */
  static BadEdited_OutOfRange_DominantValueChanged = new StatusCode({name: "BadEdited_OutOfRange_DominantValueChanged", code: 0x811C0000, description: "It is delivered with a dependent Variable value when a dominant Variable has changed, the value is not legal and the change has not been applied."});
  /** It is delivered with a dependent Variable value when a dominant or dependent Variable has changed and the value is not legal. */
  static BadOutOfRange_DominantValueChanged_DependentValueChanged = new StatusCode({name: "BadOutOfRange_DominantValueChanged_DependentValueChanged", code: 0x811D0000, description: "It is delivered with a dependent Variable value when a dominant or dependent Variable has changed and the value is not legal."});
  /** It is delivered with a dependent Variable value when a dominant or dependent Variable has changed, the value is not legal and the change has not been applied. */
  static BadEdited_OutOfRange_DominantValueChanged_DependentValueChanged = new StatusCode({name: "BadEdited_OutOfRange_DominantValueChanged_DependentValueChanged", code: 0x811E0000, description: "It is delivered with a dependent Variable value when a dominant or dependent Variable has changed, the value is not legal and the change has not been applied."});
  /** The communication layer has raised an event. */
  static GoodCommunicationEvent = new StatusCode({name: "GoodCommunicationEvent", code: 0x00A70000, description: "The communication layer has raised an event."});
  /** The system is shutting down. */
  static GoodShutdownEvent = new StatusCode({name: "GoodShutdownEvent", code: 0x00A80000, description: "The system is shutting down."});
  /** The operation is not finished and needs to be called again. */
  static GoodCallAgain = new StatusCode({name: "GoodCallAgain", code: 0x00A90000, description: "The operation is not finished and needs to be called again."});
  /** A non-critical timeout occurred. */
  static GoodNonCriticalTimeout = new StatusCode({name: "GoodNonCriticalTimeout", code: 0x00AA0000, description: "A non-critical timeout occurred."});
  /** One or more arguments are invalid. */
  static BadInvalidArgument = new StatusCode({name: "BadInvalidArgument", code: 0x80AB0000, description: "One or more arguments are invalid."});
  /** Could not establish a network connection to remote server. */
  static BadConnectionRejected = new StatusCode({name: "BadConnectionRejected", code: 0x80AC0000, description: "Could not establish a network connection to remote server."});
  /** The server has disconnected from the client. */
  static BadDisconnect = new StatusCode({name: "BadDisconnect", code: 0x80AD0000, description: "The server has disconnected from the client."});
  /** The network connection has been closed. */
  static BadConnectionClosed = new StatusCode({name: "BadConnectionClosed", code: 0x80AE0000, description: "The network connection has been closed."});
  /** The operation cannot be completed because the object is closed, uninitialized or in some other invalid state. */
  static BadInvalidState = new StatusCode({name: "BadInvalidState", code: 0x80AF0000, description: "The operation cannot be completed because the object is closed, uninitialized or in some other invalid state."});
  /** Cannot move beyond end of the stream. */
  static BadEndOfStream = new StatusCode({name: "BadEndOfStream", code: 0x80B00000, description: "Cannot move beyond end of the stream."});
  /** No data is currently available for reading from a non-blocking stream. */
  static BadNoDataAvailable = new StatusCode({name: "BadNoDataAvailable", code: 0x80B10000, description: "No data is currently available for reading from a non-blocking stream."});
  /** The asynchronous operation is waiting for a response. */
  static BadWaitingForResponse = new StatusCode({name: "BadWaitingForResponse", code: 0x80B20000, description: "The asynchronous operation is waiting for a response."});
  /** The asynchronous operation was abandoned by the caller. */
  static BadOperationAbandoned = new StatusCode({name: "BadOperationAbandoned", code: 0x80B30000, description: "The asynchronous operation was abandoned by the caller."});
  /** The stream did not return all data requested (possibly because it is a non-blocking stream). */
  static BadExpectedStreamToBlock = new StatusCode({name: "BadExpectedStreamToBlock", code: 0x80B40000, description: "The stream did not return all data requested (possibly because it is a non-blocking stream)."});
  /** Non blocking behaviour is required and the operation would block. */
  static BadWouldBlock = new StatusCode({name: "BadWouldBlock", code: 0x80B50000, description: "Non blocking behaviour is required and the operation would block."});
  /** A value had an invalid syntax. */
  static BadSyntaxError = new StatusCode({name: "BadSyntaxError", code: 0x80B60000, description: "A value had an invalid syntax."});
  /** The operation could not be finished because all available connections are in use. */
  static BadMaxConnectionsReached = new StatusCode({name: "BadMaxConnectionsReached", code: 0x80B70000, description: "The operation could not be finished because all available connections are in use."});
  /** The value may not be accurate because the transducer is in manual mode. */
  static UncertainTransducerInManual = new StatusCode({name: "UncertainTransducerInManual", code: 0x42080000, description: "The value may not be accurate because the transducer is in manual mode."});
  /** The value is simulated. */
  static UncertainSimulatedValue = new StatusCode({name: "UncertainSimulatedValue", code: 0x42090000, description: "The value is simulated."});
  /** The value may not be accurate due to a sensor calibration fault. */
  static UncertainSensorCalibration = new StatusCode({name: "UncertainSensorCalibration", code: 0x420A0000, description: "The value may not be accurate due to a sensor calibration fault."});
  /** The value may not be accurate due to a configuration issue. */
  static UncertainConfigurationError = new StatusCode({name: "UncertainConfigurationError", code: 0x420F0000, description: "The value may not be accurate due to a configuration issue."});
  /** The value source supports cascade handshaking and the value has been Initialized based on an initialization request from a cascade secondary. */
  static GoodCascadeInitializationAcknowledged = new StatusCode({name: "GoodCascadeInitializationAcknowledged", code: 0x04010000, description: "The value source supports cascade handshaking and the value has been Initialized based on an initialization request from a cascade secondary."});
  /** The value source supports cascade handshaking and is requesting initialization of a cascade primary. */
  static GoodCascadeInitializationRequest = new StatusCode({name: "GoodCascadeInitializationRequest", code: 0x04020000, description: "The value source supports cascade handshaking and is requesting initialization of a cascade primary."});
  /** The value source supports cascade handshaking, however, the source’s current state does not allow for cascade. */
  static GoodCascadeNotInvited = new StatusCode({name: "GoodCascadeNotInvited", code: 0x04030000, description: "The value source supports cascade handshaking, however, the source’s current state does not allow for cascade."});
  /** The value source supports cascade handshaking, however, the source has not selected the corresponding cascade primary for use. */
  static GoodCascadeNotSelected = new StatusCode({name: "GoodCascadeNotSelected", code: 0x04040000, description: "The value source supports cascade handshaking, however, the source has not selected the corresponding cascade primary for use."});
  /** There is a fault state condition active in the value source. */
  static GoodFaultStateActive = new StatusCode({name: "GoodFaultStateActive", code: 0x04070000, description: "There is a fault state condition active in the value source."});
  /** A fault state condition is being requested of the destination. */
  static GoodInitiateFaultState = new StatusCode({name: "GoodInitiateFaultState", code: 0x04080000, description: "A fault state condition is being requested of the destination."});
  /** The value is accurate, and the signal source supports cascade handshaking. */
  static GoodCascade = new StatusCode({name: "GoodCascade", code: 0x04090000, description: "The value is accurate, and the signal source supports cascade handshaking."});
  static 0x00000000 = StatusCode.Good;
  static 0x40000000 = StatusCode.Uncertain;
  static 0x80000000 = StatusCode.Bad;
  static 0x80010000 = StatusCode.BadUnexpectedError;
  static 0x80020000 = StatusCode.BadInternalError;
  static 0x80030000 = StatusCode.BadOutOfMemory;
  static 0x80040000 = StatusCode.BadResourceUnavailable;
  static 0x80050000 = StatusCode.BadCommunicationError;
  static 0x80060000 = StatusCode.BadEncodingError;
  static 0x80070000 = StatusCode.BadDecodingError;
  static 0x80080000 = StatusCode.BadEncodingLimitsExceeded;
  static 0x80B80000 = StatusCode.BadRequestTooLarge;
  static 0x80B90000 = StatusCode.BadResponseTooLarge;
  static 0x80090000 = StatusCode.BadUnknownResponse;
  static 0x800A0000 = StatusCode.BadTimeout;
  static 0x800B0000 = StatusCode.BadServiceUnsupported;
  static 0x800C0000 = StatusCode.BadShutdown;
  static 0x800D0000 = StatusCode.BadServerNotConnected;
  static 0x800E0000 = StatusCode.BadServerHalted;
  static 0x800F0000 = StatusCode.BadNothingToDo;
  static 0x80100000 = StatusCode.BadTooManyOperations;
  static 0x80DB0000 = StatusCode.BadTooManyMonitoredItems;
  static 0x80110000 = StatusCode.BadDataTypeIdUnknown;
  static 0x80120000 = StatusCode.BadCertificateInvalid;
  static 0x80130000 = StatusCode.BadSecurityChecksFailed;
  static 0x81140000 = StatusCode.BadCertificatePolicyCheckFailed;
  static 0x80140000 = StatusCode.BadCertificateTimeInvalid;
  static 0x80150000 = StatusCode.BadCertificateIssuerTimeInvalid;
  static 0x80160000 = StatusCode.BadCertificateHostNameInvalid;
  static 0x80170000 = StatusCode.BadCertificateUriInvalid;
  static 0x80180000 = StatusCode.BadCertificateUseNotAllowed;
  static 0x80190000 = StatusCode.BadCertificateIssuerUseNotAllowed;
  static 0x801A0000 = StatusCode.BadCertificateUntrusted;
  static 0x801B0000 = StatusCode.BadCertificateRevocationUnknown;
  static 0x801C0000 = StatusCode.BadCertificateIssuerRevocationUnknown;
  static 0x801D0000 = StatusCode.BadCertificateRevoked;
  static 0x801E0000 = StatusCode.BadCertificateIssuerRevoked;
  static 0x810D0000 = StatusCode.BadCertificateChainIncomplete;
  static 0x801F0000 = StatusCode.BadUserAccessDenied;
  static 0x80200000 = StatusCode.BadIdentityTokenInvalid;
  static 0x80210000 = StatusCode.BadIdentityTokenRejected;
  static 0x80220000 = StatusCode.BadSecureChannelIdInvalid;
  static 0x80230000 = StatusCode.BadInvalidTimestamp;
  static 0x80240000 = StatusCode.BadNonceInvalid;
  static 0x80250000 = StatusCode.BadSessionIdInvalid;
  static 0x80260000 = StatusCode.BadSessionClosed;
  static 0x80270000 = StatusCode.BadSessionNotActivated;
  static 0x80280000 = StatusCode.BadSubscriptionIdInvalid;
  static 0x802A0000 = StatusCode.BadRequestHeaderInvalid;
  static 0x802B0000 = StatusCode.BadTimestampsToReturnInvalid;
  static 0x802C0000 = StatusCode.BadRequestCancelledByClient;
  static 0x80E50000 = StatusCode.BadTooManyArguments;
  static 0x810E0000 = StatusCode.BadLicenseExpired;
  static 0x810F0000 = StatusCode.BadLicenseLimitsExceeded;
  static 0x81100000 = StatusCode.BadLicenseNotAvailable;
  static 0x002D0000 = StatusCode.GoodSubscriptionTransferred;
  static 0x002E0000 = StatusCode.GoodCompletesAsynchronously;
  static 0x002F0000 = StatusCode.GoodOverload;
  static 0x00300000 = StatusCode.GoodClamped;
  static 0x80310000 = StatusCode.BadNoCommunication;
  static 0x80320000 = StatusCode.BadWaitingForInitialData;
  static 0x80330000 = StatusCode.BadNodeIdInvalid;
  static 0x80340000 = StatusCode.BadNodeIdUnknown;
  static 0x80350000 = StatusCode.BadAttributeIdInvalid;
  static 0x80360000 = StatusCode.BadIndexRangeInvalid;
  static 0x80370000 = StatusCode.BadIndexRangeNoData;
  static 0x80380000 = StatusCode.BadDataEncodingInvalid;
  static 0x80390000 = StatusCode.BadDataEncodingUnsupported;
  static 0x803A0000 = StatusCode.BadNotReadable;
  static 0x803B0000 = StatusCode.BadNotWritable;
  static 0x803C0000 = StatusCode.BadOutOfRange;
  static 0x803D0000 = StatusCode.BadNotSupported;
  static 0x803E0000 = StatusCode.BadNotFound;
  static 0x803F0000 = StatusCode.BadObjectDeleted;
  static 0x80400000 = StatusCode.BadNotImplemented;
  static 0x80410000 = StatusCode.BadMonitoringModeInvalid;
  static 0x80420000 = StatusCode.BadMonitoredItemIdInvalid;
  static 0x80430000 = StatusCode.BadMonitoredItemFilterInvalid;
  static 0x80440000 = StatusCode.BadMonitoredItemFilterUnsupported;
  static 0x80450000 = StatusCode.BadFilterNotAllowed;
  static 0x80460000 = StatusCode.BadStructureMissing;
  static 0x80470000 = StatusCode.BadEventFilterInvalid;
  static 0x80480000 = StatusCode.BadContentFilterInvalid;
  static 0x80C10000 = StatusCode.BadFilterOperatorInvalid;
  static 0x80C20000 = StatusCode.BadFilterOperatorUnsupported;
  static 0x80C30000 = StatusCode.BadFilterOperandCountMismatch;
  static 0x80490000 = StatusCode.BadFilterOperandInvalid;
  static 0x80C40000 = StatusCode.BadFilterElementInvalid;
  static 0x80C50000 = StatusCode.BadFilterLiteralInvalid;
  static 0x804A0000 = StatusCode.BadContinuationPointInvalid;
  static 0x804B0000 = StatusCode.BadNoContinuationPoints;
  static 0x804C0000 = StatusCode.BadReferenceTypeIdInvalid;
  static 0x804D0000 = StatusCode.BadBrowseDirectionInvalid;
  static 0x804E0000 = StatusCode.BadNodeNotInView;
  static 0x81120000 = StatusCode.BadNumericOverflow;
  static 0x804F0000 = StatusCode.BadServerUriInvalid;
  static 0x80500000 = StatusCode.BadServerNameMissing;
  static 0x80510000 = StatusCode.BadDiscoveryUrlMissing;
  static 0x80520000 = StatusCode.BadSempahoreFileMissing;
  static 0x80530000 = StatusCode.BadRequestTypeInvalid;
  static 0x80540000 = StatusCode.BadSecurityModeRejected;
  static 0x80550000 = StatusCode.BadSecurityPolicyRejected;
  static 0x80560000 = StatusCode.BadTooManySessions;
  static 0x80570000 = StatusCode.BadUserSignatureInvalid;
  static 0x80580000 = StatusCode.BadApplicationSignatureInvalid;
  static 0x80590000 = StatusCode.BadNoValidCertificates;
  static 0x80C60000 = StatusCode.BadIdentityChangeNotSupported;
  static 0x805A0000 = StatusCode.BadRequestCancelledByRequest;
  static 0x805B0000 = StatusCode.BadParentNodeIdInvalid;
  static 0x805C0000 = StatusCode.BadReferenceNotAllowed;
  static 0x805D0000 = StatusCode.BadNodeIdRejected;
  static 0x805E0000 = StatusCode.BadNodeIdExists;
  static 0x805F0000 = StatusCode.BadNodeClassInvalid;
  static 0x80600000 = StatusCode.BadBrowseNameInvalid;
  static 0x80610000 = StatusCode.BadBrowseNameDuplicated;
  static 0x80620000 = StatusCode.BadNodeAttributesInvalid;
  static 0x80630000 = StatusCode.BadTypeDefinitionInvalid;
  static 0x80640000 = StatusCode.BadSourceNodeIdInvalid;
  static 0x80650000 = StatusCode.BadTargetNodeIdInvalid;
  static 0x80660000 = StatusCode.BadDuplicateReferenceNotAllowed;
  static 0x80670000 = StatusCode.BadInvalidSelfReference;
  static 0x80680000 = StatusCode.BadReferenceLocalOnly;
  static 0x80690000 = StatusCode.BadNoDeleteRights;
  static 0x40BC0000 = StatusCode.UncertainReferenceNotDeleted;
  static 0x806A0000 = StatusCode.BadServerIndexInvalid;
  static 0x806B0000 = StatusCode.BadViewIdUnknown;
  static 0x80C90000 = StatusCode.BadViewTimestampInvalid;
  static 0x80CA0000 = StatusCode.BadViewParameterMismatch;
  static 0x80CB0000 = StatusCode.BadViewVersionInvalid;
  static 0x40C00000 = StatusCode.UncertainNotAllNodesAvailable;
  static 0x00BA0000 = StatusCode.GoodResultsMayBeIncomplete;
  static 0x80C80000 = StatusCode.BadNotTypeDefinition;
  static 0x406C0000 = StatusCode.UncertainReferenceOutOfServer;
  static 0x806D0000 = StatusCode.BadTooManyMatches;
  static 0x806E0000 = StatusCode.BadQueryTooComplex;
  static 0x806F0000 = StatusCode.BadNoMatch;
  static 0x80700000 = StatusCode.BadMaxAgeInvalid;
  static 0x80E60000 = StatusCode.BadSecurityModeInsufficient;
  static 0x80710000 = StatusCode.BadHistoryOperationInvalid;
  static 0x80720000 = StatusCode.BadHistoryOperationUnsupported;
  static 0x80BD0000 = StatusCode.BadInvalidTimestampArgument;
  static 0x80730000 = StatusCode.BadWriteNotSupported;
  static 0x80740000 = StatusCode.BadTypeMismatch;
  static 0x80750000 = StatusCode.BadMethodInvalid;
  static 0x80760000 = StatusCode.BadArgumentsMissing;
  static 0x81110000 = StatusCode.BadNotExecutable;
  static 0x80770000 = StatusCode.BadTooManySubscriptions;
  static 0x80780000 = StatusCode.BadTooManyPublishRequests;
  static 0x80790000 = StatusCode.BadNoSubscription;
  static 0x807A0000 = StatusCode.BadSequenceNumberUnknown;
  static 0x00DF0000 = StatusCode.GoodRetransmissionQueueNotSupported;
  static 0x807B0000 = StatusCode.BadMessageNotAvailable;
  static 0x807C0000 = StatusCode.BadInsufficientClientProfile;
  static 0x80BF0000 = StatusCode.BadStateNotActive;
  static 0x81150000 = StatusCode.BadAlreadyExists;
  static 0x807D0000 = StatusCode.BadTcpServerTooBusy;
  static 0x807E0000 = StatusCode.BadTcpMessageTypeInvalid;
  static 0x807F0000 = StatusCode.BadTcpSecureChannelUnknown;
  static 0x80800000 = StatusCode.BadTcpMessageTooLarge;
  static 0x80810000 = StatusCode.BadTcpNotEnoughResources;
  static 0x80820000 = StatusCode.BadTcpInternalError;
  static 0x80830000 = StatusCode.BadTcpEndpointUrlInvalid;
  static 0x80840000 = StatusCode.BadRequestInterrupted;
  static 0x80850000 = StatusCode.BadRequestTimeout;
  static 0x80860000 = StatusCode.BadSecureChannelClosed;
  static 0x80870000 = StatusCode.BadSecureChannelTokenUnknown;
  static 0x80880000 = StatusCode.BadSequenceNumberInvalid;
  static 0x80BE0000 = StatusCode.BadProtocolVersionUnsupported;
  static 0x80890000 = StatusCode.BadConfigurationError;
  static 0x808A0000 = StatusCode.BadNotConnected;
  static 0x808B0000 = StatusCode.BadDeviceFailure;
  static 0x808C0000 = StatusCode.BadSensorFailure;
  static 0x808D0000 = StatusCode.BadOutOfService;
  static 0x808E0000 = StatusCode.BadDeadbandFilterInvalid;
  static 0x408F0000 = StatusCode.UncertainNoCommunicationLastUsableValue;
  static 0x40900000 = StatusCode.UncertainLastUsableValue;
  static 0x40910000 = StatusCode.UncertainSubstituteValue;
  static 0x40920000 = StatusCode.UncertainInitialValue;
  static 0x40930000 = StatusCode.UncertainSensorNotAccurate;
  static 0x40940000 = StatusCode.UncertainEngineeringUnitsExceeded;
  static 0x40950000 = StatusCode.UncertainSubNormal;
  static 0x00960000 = StatusCode.GoodLocalOverride;
  static 0x80970000 = StatusCode.BadRefreshInProgress;
  static 0x80980000 = StatusCode.BadConditionAlreadyDisabled;
  static 0x80CC0000 = StatusCode.BadConditionAlreadyEnabled;
  static 0x80990000 = StatusCode.BadConditionDisabled;
  static 0x809A0000 = StatusCode.BadEventIdUnknown;
  static 0x80BB0000 = StatusCode.BadEventNotAcknowledgeable;
  static 0x80CD0000 = StatusCode.BadDialogNotActive;
  static 0x80CE0000 = StatusCode.BadDialogResponseInvalid;
  static 0x80CF0000 = StatusCode.BadConditionBranchAlreadyAcked;
  static 0x80D00000 = StatusCode.BadConditionBranchAlreadyConfirmed;
  static 0x80D10000 = StatusCode.BadConditionAlreadyShelved;
  static 0x80D20000 = StatusCode.BadConditionNotShelved;
  static 0x80D30000 = StatusCode.BadShelvingTimeOutOfRange;
  static 0x809B0000 = StatusCode.BadNoData;
  static 0x80D70000 = StatusCode.BadBoundNotFound;
  static 0x80D80000 = StatusCode.BadBoundNotSupported;
  static 0x809D0000 = StatusCode.BadDataLost;
  static 0x809E0000 = StatusCode.BadDataUnavailable;
  static 0x809F0000 = StatusCode.BadEntryExists;
  static 0x80A00000 = StatusCode.BadNoEntryExists;
  static 0x80A10000 = StatusCode.BadTimestampNotSupported;
  static 0x00A20000 = StatusCode.GoodEntryInserted;
  static 0x00A30000 = StatusCode.GoodEntryReplaced;
  static 0x40A40000 = StatusCode.UncertainDataSubNormal;
  static 0x00A50000 = StatusCode.GoodNoData;
  static 0x00A60000 = StatusCode.GoodMoreData;
  static 0x80D40000 = StatusCode.BadAggregateListMismatch;
  static 0x80D50000 = StatusCode.BadAggregateNotSupported;
  static 0x80D60000 = StatusCode.BadAggregateInvalidInputs;
  static 0x80DA0000 = StatusCode.BadAggregateConfigurationRejected;
  static 0x00D90000 = StatusCode.GoodDataIgnored;
  static 0x80E40000 = StatusCode.BadRequestNotAllowed;
  static 0x81130000 = StatusCode.BadRequestNotComplete;
  static 0x811F0000 = StatusCode.BadTicketRequired;
  static 0x81200000 = StatusCode.BadTicketInvalid;
  static 0x00DC0000 = StatusCode.GoodEdited;
  static 0x00DD0000 = StatusCode.GoodPostActionFailed;
  static 0x40DE0000 = StatusCode.UncertainDominantValueChanged;
  static 0x00E00000 = StatusCode.GoodDependentValueChanged;
  static 0x80E10000 = StatusCode.BadDominantValueChanged;
  static 0x40E20000 = StatusCode.UncertainDependentValueChanged;
  static 0x80E30000 = StatusCode.BadDependentValueChanged;
  static 0x01160000 = StatusCode.GoodEdited_DependentValueChanged;
  static 0x01170000 = StatusCode.GoodEdited_DominantValueChanged;
  static 0x01180000 = StatusCode.GoodEdited_DominantValueChanged_DependentValueChanged;
  static 0x81190000 = StatusCode.BadEdited_OutOfRange;
  static 0x811A0000 = StatusCode.BadInitialValue_OutOfRange;
  static 0x811B0000 = StatusCode.BadOutOfRange_DominantValueChanged;
  static 0x811C0000 = StatusCode.BadEdited_OutOfRange_DominantValueChanged;
  static 0x811D0000 = StatusCode.BadOutOfRange_DominantValueChanged_DependentValueChanged;
  static 0x811E0000 = StatusCode.BadEdited_OutOfRange_DominantValueChanged_DependentValueChanged;
  static 0x00A70000 = StatusCode.GoodCommunicationEvent;
  static 0x00A80000 = StatusCode.GoodShutdownEvent;
  static 0x00A90000 = StatusCode.GoodCallAgain;
  static 0x00AA0000 = StatusCode.GoodNonCriticalTimeout;
  static 0x80AB0000 = StatusCode.BadInvalidArgument;
  static 0x80AC0000 = StatusCode.BadConnectionRejected;
  static 0x80AD0000 = StatusCode.BadDisconnect;
  static 0x80AE0000 = StatusCode.BadConnectionClosed;
  static 0x80AF0000 = StatusCode.BadInvalidState;
  static 0x80B00000 = StatusCode.BadEndOfStream;
  static 0x80B10000 = StatusCode.BadNoDataAvailable;
  static 0x80B20000 = StatusCode.BadWaitingForResponse;
  static 0x80B30000 = StatusCode.BadOperationAbandoned;
  static 0x80B40000 = StatusCode.BadExpectedStreamToBlock;
  static 0x80B50000 = StatusCode.BadWouldBlock;
  static 0x80B60000 = StatusCode.BadSyntaxError;
  static 0x80B70000 = StatusCode.BadMaxConnectionsReached;
  static 0x42080000 = StatusCode.UncertainTransducerInManual;
  static 0x42090000 = StatusCode.UncertainSimulatedValue;
  static 0x420A0000 = StatusCode.UncertainSensorCalibration;
  static 0x420F0000 = StatusCode.UncertainConfigurationError;
  static 0x04010000 = StatusCode.GoodCascadeInitializationAcknowledged;
  static 0x04020000 = StatusCode.GoodCascadeInitializationRequest;
  static 0x04030000 = StatusCode.GoodCascadeNotInvited;
  static 0x04040000 = StatusCode.GoodCascadeNotSelected;
  static 0x04070000 = StatusCode.GoodFaultStateActive;
  static 0x04080000 = StatusCode.GoodInitiateFaultState;
  static 0x04090000 = StatusCode.GoodCascade;
}
